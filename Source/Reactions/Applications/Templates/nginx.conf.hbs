events { worker_connections 1024; }

http {
    server {
        listen 80;
        server_name dev.opensjon.aksio.app;
        server_tokens off;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen [::]:443 ssl;
        listen 443 ssl;
        server_name dev.opensjon.aksio.app;
        server_tokens off;

        auth_request /validate;

        # ssl_certificate /etc/letsencrypt/live/example.org/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem;
        # include /etc/letsencrypt/options-ssl-nginx.conf;
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        ssl_protocols              TLSv1.2;
        ssl_ciphers                ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
        ssl_prefer_server_ciphers  on;
        keepalive_timeout 300; # up from 75 secs default
        add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains';

        ssl_certificate      /config/ssl.crt;
        ssl_certificate_key  /config/ssl.key;

        location /auth {
            auth_request off;
            allow all;
            proxy_pass http://ingress.myapplication.local:9090/auth;
            proxy_set_header Host $http_host;
        }

        location /login {
            auth_request off;
            allow all;
            proxy_pass http://ingress.myapplication.local:9090/login;
            proxy_set_header Host $http_host;
        }

        location = /validate {
            proxy_pass http://ingress.myapplication.local:9090/validate;
            proxy_set_header Host $http_host;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";

            auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

            auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
            auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
            auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
        }

        error_page 401 = @error401;

        location @error401 {
            return 302 http://$http_host/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        }

        location / {
            proxy_pass http://mymicroservice3.myapplication.local:80;
            proxy_set_header Host $http_host;
        }
    }
}
